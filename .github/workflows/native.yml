name: Native Image
on:
  push:
  pull_request:
  release:
    types: [published]
jobs:
  native-image:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            uploaded_filename: sbtn-x86_64-pc-linux
            local_path: client/target/bin/sbtn
          # - os: windows-latest
          #   uploaded_filename: sbtn-x86_64-pc-win32.exe
          #   local_path: client\target\bin\sbtn.exe
    env:
      JAVA_OPTS: -Xms2048M -Xmx2048M -Xss6M -XX:ReservedCodeCacheSize=256M
    steps:
      - name: Checkout sbt/sbt
        uses: actions/checkout@v4
        with:
          repository: eed3si9n/sbt
          # Make sure the native-image-macos and native-image-aarch64-pc-linux-linux also updated
          ref: wip/musl
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 8
          # cache: sbt
      - name: Setup sbt
        uses: sbt/setup-sbt@v1
      - run: git fetch --tags || true
      - name: Setup Windows C++ toolchain
        uses: ilammy/msvc-dev-cmd@v1
        if: ${{ matrix.os == 'windows-latest' }}

      - name: Set up toolchain dir
        id: musl-toolchain
        shell: bash
        run: |
          echo "musl_toolchain=$RUNNER_TOOL_CACHE/musl/10" >> "$GITHUB_OUTPUT"

      - name: Setup musl
        shell: bash
        run: |
          mkdir -p "$TOOLCHAIN_DIR"
          export CC=$TOOLCHAIN_DIR/bin/gcc
          pushd "$RUNNER_TEMP"
          curl -sL "https://more.musl.cc/10/x86_64-linux-musl/x86_64-linux-musl-native.tgz" > \
          x86_64-linux-musl-native.tgz
          tar zxf x86_64-linux-musl-native.tgz -C "$TOOLCHAIN_DIR" --strip-components=1
          curl -sL "https://zlib.net/zlib-1.3.1.tar.gz" > zlib.tar.gz
          mkdir -p zlib
          tar zxf zlib.tar.gz -C zlib --strip-components=1
          cd zlib
          ./configure --prefix=$TOOLCHAIN_DIR --static
          make
          make install
          popd
        env:
          TOOLCHAIN_DIR: "${{ steps.musl-toolchain.outputs.musl_toolchain }}"
      - name: Build
        shell: bash
        run: |
          echo $(pwd)
          export CC=$TOOLCHAIN_DIR/bin/gcc
          export PATH="$TOOLCHAIN_DIR/bin:$PATH"
          mkdir -p client/target/bin/
          sbt nativeImage
        env:
          TOOLCHAIN_DIR: "${{ steps.musl-toolchain.outputs.musl_toolchain }}"
      - uses: actions/upload-artifact@v4
        with:
          path: ${{ matrix.local_path }}
          name: ${{ matrix.uploaded_filename }}
      - name: Upload release
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ matrix.local_path }}
          asset_name: ${{ matrix.uploaded_filename }}
          asset_content_type: application/octet-stream

  # native-image-macos:
  #   needs: native-image
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       include:
  #         - os: macOS-12
  #           uploaded_filename: sbtn-x86_64-apple-darwin
  #           local_path: client/target/bin/sbtn
  #         - os: macOS-14
  #           uploaded_filename: sbtn-aarch64-apple-darwin
  #           local_path: client/target/bin/sbtn
  #   env:
  #     JAVA_OPTS: -Xms2048M -Xmx2048M -Xss6M -XX:ReservedCodeCacheSize=256M
  #   steps:
  #     - name: Checkout sbt/sbt
  #       uses: actions/checkout@v4
  #       with:
  #         repository: sbt/sbt
  #         ref: 1.10.x
  #     - name: Setup JDK
  #       uses: actions/setup-java@v4
  #       with:
  #         distribution: temurin
  #         java-version: 17
  #         # cache: sbt
  #     - name: Setup sbt
  #       uses: sbt/setup-sbt@v1
  #     - run: git fetch --tags || true

  #     - name: Build
  #       shell: bash
  #       run: |
  #         mkdir -p client/target/bin/
  #         sbt nativeImage

  #     - uses: actions/upload-artifact@v4
  #       with:
  #         path: ${{ matrix.local_path }}
  #         name: ${{ matrix.uploaded_filename }}

  # native-image-universal-macos:
  #   needs: native-image-macos
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       include:
  #         - os: macOS-12
  #           uploaded_filename: sbtn-universal-apple-darwin
  #           local_path: client/target/bin/sbtn
  #   steps:
  #     - name: Download binaries
  #       uses: actions/download-artifact@v4
  #     - name: Display structure of downloaded files
  #       run: ls -R
  #     - name: Build universal binary
  #       shell: bash
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       run: |
  #         mkdir -p client/target/bin/
  #         lipo -create -o "${{ matrix.local_path }}" "sbtn-x86_64-apple-darwin/sbtn" "sbtn-aarch64-apple-darwin/sbtn"
  #     - uses: actions/upload-artifact@v4
  #       with:
  #         path: ${{ matrix.local_path }}
  #         name: ${{ matrix.uploaded_filename }}
  #     - name: Upload release
  #       if: github.event_name == 'release'
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ github.event.release.upload_url }}
  #         asset_path: ${{ matrix.local_path }}
  #         asset_name: ${{ matrix.uploaded_filename }}
  #         asset_content_type: application/octet-stream

  native-image-aarch64-pc-linux-linux:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            uploaded_filename: sbtn-aarch64-pc-linux
            local_path: client/target/bin/sbtn
    env:
      JAVA_OPTS: -Xms2048M -Xmx2048M -Xss6M -XX:ReservedCodeCacheSize=256M
    steps:
      - name: Checkout sbt/sbt
        uses: actions/checkout@v4
        with:
          repository: eed3si9n/sbt
          ref: wip/musl
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 8
          # cache: sbt
      - name: Setup sbt
        uses: sbt/setup-sbt@v1
      - name: Build Linux aarch64
        uses: uraimo/run-on-arch-action@v2
        with:
          arch: aarch64
          distro: ubuntu20.04

          # Speeds up builds per the run-on-arch-action README
          githubToken: ${{ github.token }}

          # The shell to run commands with in the container
          shell: /bin/bash

          # build-essential and libz-dev are required to build native images.
          install: |
            apt-get update -q -y
            apt-get install -q -y curl openjdk-8-jdk build-essential
            # Install sbt inside the docker image
            mkdir -p "$HOME/bin/"
            curl -sL https://raw.githubusercontent.com/sbt/sbt/v1.9.9/sbt > "$HOME/bin/sbt"
            chmod +x "$HOME/bin/sbt"

            export TOOLCHAIN_DIR="/opt/musl/10"
            mkdir -p "$TOOLCHAIN_DIR"
            export CC=$TOOLCHAIN_DIR/bin/gcc
            pushd /tmp
            curl -sL "https://more.musl.cc/10/x86_64-linux-musl/aarch64-linux-musl-native.tgz" > \
            aarch64-linux-musl-native.tgz
            tar zxf aarch64-linux-musl-native.tgz -C "$TOOLCHAIN_DIR" --strip-components=1
            curl -sL "https://zlib.net/zlib-1.3.1.tar.gz" > zlib.tar.gz
            mkdir -p zlib
            tar zxf zlib.tar.gz -C zlib --strip-components=1
            cd zlib
            ./configure --prefix=$TOOLCHAIN_DIR --static
            make
            make install
            popd

          run: |
            # Use sbt inside the Docker image
            export TOOLCHAIN_DIR="/opt/musl/10"
            export CC=$TOOLCHAIN_DIR/bin/gcc
            export PATH="$TOOLCHAIN_DIR/bin:$PATH:$HOME/bin"
            mkdir -p client/target/bin/
            sbt nativeImage
      - uses: actions/upload-artifact@v4
        with:
          path: ${{ matrix.local_path }}
          name: ${{ matrix.uploaded_filename }}
      - name: Upload release
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ matrix.local_path }}
          asset_name: ${{ matrix.uploaded_filename }}
          asset_content_type: application/octet-stream
